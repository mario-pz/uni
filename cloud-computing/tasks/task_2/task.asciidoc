= Υπολογιστική Νέφους και Υπηρεσίες
:toc:

:source-language: yaml

image::https://x2e5r7b9.rocketcdn.me/wp-content/uploads/2020/02/%CE%95%CE%B3%CF%87%CF%81%CF%89%CE%BC%CE%BF-%CE%B5%CC%81%CE%BC%CE%B2%CE%BB%CE%B7%CE%BC%CE%B1.jpg[width=45%, align=center]

.ΕΡΓΑΣΙΑ 2: Ανάλυση Απόδοσης και Βελτιστοποίηση Microservices
[NOTE]
****
[.text-center]
Η δευτερη εργασία του μαθήματος "Υπολογιστική Νέφους και Υπηρεσίες"
είναι βασισμένη στο Load Testing για microservices
****

*Φοιτητής*: +
Μαριος Παπαζογλου - ice21390179

== Εισαγωγή

Η παρούσα έκθεση αποσκοπεί στην παρουσίαση των αποτελεσμάτων μετρήσεων φορτίου σε cloud υποδομές και την εξερεύνηση θεμάτων που συνδέονται με αυτές 
τις μετρήσεις. Ειδικότερα, θα εξετάσουμε την επίδραση του περιβάλλοντος στις μετρήσεις φορτίου και πώς αυτές 
αλλάζουν όταν σχεδιάζονται για μικρουπηρεσίες (microservices).

Οι μετρήσεις φορτίου αποτελούν κρίσιμο στοιχείο για την αξιολόγηση και βελτιστοποίηση της απόδοσης των cloud υποδομών. 
Με τη βοήθεια των μετρήσεων αυτών, μπορούμε να αναγνωρίσουμε τις περιοχές υψηλής φόρτωσης, τις αιτίες πιθανών προβλημάτων και να
προβλέψουμε τις ανάγκες για αναπτύξεις και αυξήσεις χωρητικότητας.

Στο πλαίσιο των μικρουπηρεσιών, οι μετρήσεις φορτίου αποκτούν μεγαλύτερη σημασία, καθώς η αρχιτεκτονική αυτή συνίσταται από μικρά, αυτόνομα και ανεξάρτητα τμήματα.
Η αξιολόγηση του φόρτου σε αυτές τις μικρουπηρεσίες μπορεί να προσφέρει ένα εμβρυακό σημείο για την εντοπισμό πιθανών προβλημάτων και την εφαρμογή βελτιώσεων.

Μέσω αυτής της έκθεσης, θα εξετάσουμε τα αποτελέσματα των μετρήσεων φορτίου σε συνδυασμό με το περιβάλλον υλοποίησης, την κλιμάκωση, την απόκριση και την 
αξιοπιστία των μικρουπηρεσιών. Μέσω αυτής της ανάλυσης, θα αποκτήσουμε μια καλύτερη κατανόηση του τρόπου λειτουργίας του συστήματος,
θα εντοπίσουμε ενδεχόμενα προβλήματα απόδοσης και θα προτείνουμε βελτιώσεις για την επίτευξη ακόμη καλύτερης επίδοσης και αξιοπιστίας.

== Ζητήματα που αφορούν τις μετρήσεις φορτίου σε υποδομές υπολογιστικού νέφους

Η μετάβαση από παραδοσιακές μονολιθικές εφαρμογές σε αρχιτεκτονικές microservices εισάγει νέες προκλήσεις στη μέτρηση και διαχείριση του φορτίου στην υποδομή.
Ενώ σε μονολιθικές εφαρμογές οι μετρήσεις φορτίου είναι σχετικά απλές, καθώς ολόκληρη η εφαρμογή εκτελείται σε έναν μόνο μηχανήματα ή ένα μικρό σύνολο διακομιστών,
η αρχιτεκτονική microservices προκαλεί τη διάσπαση της εφαρμογής σε μικρότερες, ανεξάρτητα αναπτυσσόμενες υπηρεσίες, οι οποίες εκτελούνται σε διάφορα containers. 
Αυτή η αλλαγή ανοίγει τον δρόμο για νέες προκλήσεις στην αντιμετώπιση του φορτίου, περιλαμβάνοντας τη διαχείριση και συλλογή δεδομένων από πολλαπλές υπηρεσίες, την αποτύπωση 
και παρακολούθηση της επικοινωνίας μεταξύ των υπηρεσιών, καθώς και τη δυνατότητα κλιμάκωσης και επέκτασης των υπηρεσιών για την αποδοτική διαχείριση του φορτίου.
Αναλύοντας και αντιμετωπίζοντας αυτές τις προκλήσεις, μπορούμε να διασφαλίσουμε την ομαλή λειτουργία και την αποδοτική χρήση των cloud υποδομών.

High complexity:: Με την αρχιτεκτονική των microservices, η πολλαπλότητα των στοιχείων αυξάνει, καθιστώντας την παρακολούθηση του συνολικού συστήματος
και τον εντοπισμό σημείων συμφόρησης πιο περίπλοκα. Κάθε microservice απαιτεί παρακολούθηση των αποδόσεών του, τη διαθεσιμότητά του και την ανίχνευση
πιθανών προβλημάτων. Η διαχείριση αυτής της υψηλής πολυπλοκότητας απαιτεί εξειδικευμένα εργαλεία και διαδικασίες.

Dynamic scaling:: Η δυναμική κλιμάκωση αποτελεί ένα σημαντικό πλεονέκτημα των microservices, 
αφού επιτρέπει την ευέλικτη προσθήκη και αφαίρεση containers ανάλογα με τις ανάγκες φόρτου.
Ωστόσο, αυτή η δυνατότητα καθιστά προβληματική την πρόβλεψη και τη διαχείριση των επιπέδων φορτίου.
Η διαχείριση της αυξομείωσης του αριθμού των containers, της αυτόματης ενεργοποίησης και απενεργοποίησης
των πόρων απαιτεί προηγμένες τεχνικές και αλγόριθμους.

Networking:: Η αρχιτεκτονική των microservices συνεπάγεται αυξημένη κίνηση δεδομένων μεταξύ των υπηρεσιών, 
και αυτό μπορεί να προκαλέσει πιθανά σημεία συμφόρησης στο δίκτυο. Επιπλέον, χωρίς ικανοποιητική διαχείριση του δικτύου,
μπορεί να προκύψουν αστοχίες και αυξημένο κόστος λόγω υπερβολικής κίνησης δεδομένων ή απώλειας πακέτων.

Οι παραπάνω προκλήσεις απαιτούν νέες προσεγγίσεις για τη μέτρηση, την παρακολούθηση και τη διαχείριση του φορτίου στην αρχιτεκτονική των μικρουπηρεσιών. Η χρήση εξειδικευμένων εργαλείων για την παρακολούθηση των επιδόσεων, η ανάλυση των δεδομένων φορτίου και η λήψη στρατηγικών αποφάσεων βασιζόμενες σε αυτά τα δεδομένα είναι αναγκαίες για την επιτυχή διαχείριση του φορτίου στην υποδομή μικρουπηρεσιών.

== Το έργο μας

Το έργο Sock Shop είναι ένα σύνολο από μικρο-υπηρεσίες που έχουν σχεδιαστεί με τις ελάχιστες προσδοκίες,
χρησιμοποιώντας το DNS για την εύρεση άλλων υπηρεσιών. Αυτό σημαίνει ότι είναι δυνατό να εισαχθούν φορτοεξισορροπητές και δρομολογητές υπηρεσιών, 
όπως απαιτείται ή επιθυμείται.

Υπάρχουν προ-κατασκευασμένα σενάρια διαμόρφωσης για διάφορες πλατφόρμες που στοχεύουν να διευκολύνουν την εκτέλεση ολόκληρης της εφαρμογής.
Το Sock Shop μπορεί να χρησιμοποιηθεί για να απεικονίσει αρχιτεκτονικές μικρο-υπηρεσιών, να δείξει πλατφόρμες σε ομιλίες και συναντήσεις,
ή ως εργαλείο εκπαίδευσης και εκμάθησης.


=== Τι είναι το Locust

Το Locust είναι ένα εργαλείο ανοιχτού κώδικα (FOSS) προσομοίωσης επισκεψιμότητας που χρησιμοποιείται για να δοκιμάσει την απόδοση
και την κλιμακωσιμότητα των δικτυακών εφαρμογών και των μικρουπηρεσιών. Μέσω του Locust, μπορούμε να προσομοιώσουμε πραγματικές κινήσεις και
εργασίες σε μια εφαρμογή και να παρακολουθήσουμε πώς ανταποκρίνεται υπό διάφορες συνθήκες φόρτου.
Το εργαλείο διαθέτει ένα απλό web UI μέσω του οποίου μπορούμε να δούμε τα αποτελέσματα των προσομοιώσεων.

=== Τι είναι το Docker Compose

Το Docker Compose είναι ένα εργαλείο που διευκολύνει τη διαχείριση και την εκτέλεση πολλαπλών συνδεδεμένων Docker containers, αυτοματοποιώντας 
τη διαδικασία μέσω ενός απλού αρχείου YAML (docker-compose.yaml). Με τη χρήση του Docker Compose, μπορούμε να καθορίσουμε τις απαιτούμενες ρυθμίσεις
και τη δομή των containers μας, καθώς και να τα εκτελέσουμε ως ένα ενιαίο σύνολο. Αυτό διευκολύνει την ανάπτυξη, την ενσωμάτωση και
την εκτέλεση των εφαρμογών που απαιτούν πολλαπλά περιβάλλοντα ή υπηρεσίες.

image::https://scontent.fath3-4.fna.fbcdn.net/v/t1.6435-9/118971971_10220558851854527_8151292185684113167_n.jpg?_nc_cat=108&ccb=1-7&_nc_sid=8631f5&_nc_ohc=eFFi_PLtPyUAX_K3Ljk&_nc_ht=scontent.fath3-4.fna&oh=00_AfCktkU4txuPzUrchThVR2f5IyCs0rrepYWge4z0_tVNyA&oe=64908E7A[width=65%, align=center]


Επομένως, γνωρίζοντας για το τι είναι το Docker Compose θα προχωρήσουμε στην εγκατάσταση του Sock Shop.

=== Εγκατάσταση Sock Shop 

Παρακάτω θα σας παρουσιάσω τις οδηγίες για να εγκαταστήσετε το Sock Shop και θα εξηγήσω τον σκοπό και τη λειτουργία κάθε εντολής:

Εγκατάσταση Docker:: Η πρώτη απαιτούμενη ενέργεια είναι η εγκατάσταση του Docker. 
Μπορείτε να ακολουθήσετε τις επίσημες οδηγίες του Docker για να εγκαταστήσετε το Docker στο σύστημά σας.

Εγκατάσταση Docker Compose:: Μετά την εγκατάσταση του Docker, πρέπει να εγκαταστήσετε το Docker Compose.
Μπορείτε να ακολουθήσετε τις επίσημες οδηγίες του Docker Compose για να το εγκαταστήσετε.

Λήψη του κώδικα του Sock Shop:: Χρησιμοποιώντας την εντολή git clone, μπορείτε να κατεβάσετε τον κώδικα του Sock Shop από το
αποθετήριο του στο GitHub. Η εντολή αυτή θα δημιουργήσει έναν φάκελο με τον όνομα "microservices-demo" και θα κατεβάσει όλο τον κώδικα εκεί.

Μετάβαση στον φάκελο microservices-demo:: Χρησιμοποιώντας την εντολή cd, μεταβείτε στον φάκελο "microservices-demo" που δημιουργήθηκε μετά τη λήψη του κώδικα.

Εκτέλεση του Docker Compose:: Με την εντολή docker-compose -f deploy/docker-compose/docker-compose.yml up -d, 
εκτελείται το Docker Compose και ξεκινούν τα containers που απαιτούνται για τη λειτουργία του Sock Shop.
Το αρχείο docker-compose.yml που βρίσκεται στη διαδρομή deploy/docker-compose/ περιέχει τις απαραίτητες παραμέτρους και ρυθμίσεις για την εκτέλεση των containers.

Μετά την ολοκλήρωση των παραπάνω εντολών, το Sock Shop θα είναι εγκατεστημένο και θα είναι διαθέσιμο για χρήση.
Μπορείτε να εξερευνήσετε το Sock Shop στον προεπιλεγμένο τοπικό σας διακομιστή, χρησιμοποιώντας τον ιστότοπο http://localhost.

image::../../assets/socks.png[width=65%, align=center]

=== Load Testing

Σύμφωνα με τις προτιμήσεις του καθηγητή, στο έργο μας θα χρησιμοποιήσουμε το Locust, ένα εργαλείο προσομοίωσης επισκεψιμότητας, 
που θα μας βοηθήσει να γεμίσουμε την εφαρμογή μας με εικονικούς επισκέπτες.


[source, shell]
----
docker run --net=host weaveworksdemos/load-test -h localhost -r 100 -c 2
----

Η εντολή εκτελεί ένα Docker container με την εικόνα weaveworksdemos/load-test. Ας δούμε τα διάφορα στοιχεία της εντολής και την σημασία τους:

docker run:: Αυτή η εντολή χρησιμοποιείται για την εκτέλεση ενός Docker container.
--net=host:: Αυτή η παράμετρος δηλώνει ότι το container θα χρησιμοποιήσει το δίκτυο του host, πράγμα που σημαίνει ότι θα έχει πρόσβαση στις ίδιες διευθύνσεις IP με τον host.
weaveworksdemos/load-test:: Αυτή είναι η εικόνα του container που θα εκτελεστεί. Στην περίπτωσή μας, χρησιμοποιούμε την εικόνα "weaveworksdemos/load-test", η οποία περιέχει το εργαλείο προσομοίωσης επισκεψιμότητας Locust.
-h localhost:: Αυτή η παράμετρος ορίζει το hostname του container σε "localhost".
-r 100:: Αυτή η παράμετρος ορίζει τον αριθμό των επαναλήψεων (requests) που θα πραγματοποιηθούν από το Locust, στην περίπτωσή μας 100.
-c 2:: Αυτή η παράμετρος ορίζει τον αριθμό των ταυτόχρονων χρηστών (concurrent users) που θα προσομοιώσει το Locust, στην περίπτωσή μας 2.

Με αυτήν την εντολή, το Docker container θα εκτελέσει το εργαλείο Locust με τις παραμέτρους που ορίσατε. Το Locust θα προσομοιώσει την επισκεψιμότητα προς το localhost, κάνοντας 100 αιτήσεις (requests) και χρησιμοποιώντας 2 ταυτόχρονους χρήστες (concurrent users).


=== Γραφική παρουσίαση και συζήτηση

Στο πλαίσιο της παρακολούθησης της απόδοσης της εφαρμογής Sock Shop, είναι ζωτικής σημασίας η ανάλυση και η κατανόηση των αιτημάτων που υποβάλλονται σε
διαφορετικά τελικά σημεία. Αυτή η ανάλυση παρέχει πολύτιμες πληροφορίες σχετικά με την ανταπόκριση της εφαρμογής και την εμπειρία χρήστη. 
Τα δεδομένα που παρουσιάζονται στον πίνακα παρουσιάζουν τον αριθμό των αιτημάτων που έγιναν σε κάθε τελικό σημείο, μαζί με πρόσθετα στατιστικά στοιχεία, 
όπως οι χρόνοι απόκρισης. Επιπλέον, η απουσία αποτυχημένων αιτημάτων υποδηλώνει τη συνολική αξιοπιστία της εφαρμογής Sock Shop κατά την περίοδο που παρατηρήθηκε.
Εμβαθύνοντας σε αυτά τα στατιστικά στοιχεία, μπορούμε να κατανοήσουμε βαθύτερα την απόδοση της εφαρμογής και να λάβουμε τεκμηριωμένες αποφάσεις για βελτιστοποίηση. 
Ας εξερευνήσουμε τα παρεχόμενα δεδομένα με περισσότερες λεπτομέρειες.


Αιτήματα και αποτυχίες: Ο πίνακας δείχνει τον αριθμό των αιτημάτων που έγιναν σε κάθε τελικό σημείο της εφαρμογής Sock Shop.
Ευτυχώς, δεν υπήρξαν αποτυχημένα αιτήματα, όπως υποδεικνύεται από τη στήλη "Αποτυχίες", η οποία δείχνει μηδενικές αποτυχίες για όλα τα τελικά σημεία.

Χρόνος απόκρισης: Η στήλη "Avg" αντιπροσωπεύει τον μέσο χρόνο απόκρισης για επιτυχημένα αιτήματα.
Οι τιμές κυμαίνονται από 3 έως 65, υποδεικνύοντας τον μέσο χρόνο που χρειάζεται για να ανταποκριθεί η εφαρμογή σε κάθε τελικό σημείο. 
Οι χαμηλότερες τιμές υποδηλώνουν ταχύτερους χρόνους απόκρισης, ενώ οι υψηλότερες τιμές μπορεί να υποδηλώνουν πιθανά προβλήματα απόδοσης.

Κατανομή χρόνου απόκρισης: Οι στήλες "Ελάχιστο" και "Μέγιστο" εμφανίζουν τους ελάχιστους και μέγιστους χρόνους απόκρισης που έχουν καταγραφεί
για επιτυχημένα αιτήματα σε κάθε τελικό σημείο. Αυτές οι τιμές παρέχουν μια κατανόηση του εύρους των χρόνων απόκρισης που βιώνουν οι χρήστες. 
Οι χαμηλότεροι ελάχιστοι χρόνοι απόκρισης υποδεικνύουν γρήγορες απαντήσεις, ενώ οι υψηλότεροι μέγιστοι χρόνοι απόκρισης μπορεί να υποδηλώνουν περιστασιακές
καθυστερήσεις ή ακραίες τιμές.

Διάμεσος χρόνος απόκρισης: Η στήλη "Διάμεσος" εμφανίζει τον διάμεσο χρόνο απόκρισης για κάθε τελικό σημείο. 
Η διάμεσος αντιπροσωπεύει τη μεσαία τιμή στο σύνολο των επιτυχών χρόνων απόκρισης. Δίνει μια ιδέα του τυπικού ή πιο συνηθισμένου χρόνου απόκρισης που
βιώνουν οι χρήστες για κάθε τελικό σημείο.

Αιτήματα ανά δευτερόλεπτο: Η στήλη "Απαιτήσεις/α" εμφανίζει τον αριθμό των αιτημάτων ανά δευτερόλεπτο που γίνονται σε κάθε τελικό σημείο.
Στα δεδομένα που δίνονται, όλα τα τελικά σημεία έχουν τιμή 0,00, υποδηλώνοντας ότι δεν υποβλήθηκαν αιτήματα κατά τη διάρκεια της παρατηρούμενης χρονικής περιόδου. Αυτό μπορεί να είναι ένα ασυνήθιστο συμβάν ή θα μπορούσε να υποδηλώνει έλλειψη κίνησης κατά τη διάρκεια αυτής της περιόδου.

Αυτά τα στατιστικά στοιχεία παρέχουν πληροφορίες για την απόδοση και τη συμπεριφορά της εφαρμογής Sock Shop. 
Μπορούν να βοηθήσουν στον εντοπισμό πιθανών σημείων συμφόρησης, στη μέτρηση της αποτελεσματικότητας του χρόνου απόκρισης και στην αξιολόγηση της συνολικής
εμπειρίας χρήστη. Περαιτέρω ανάλυση και σύγκριση με στόχους απόδοσης ή σημεία αναφοράς θα ήταν απαραίτητη για να εξαχθούν πιο συγκεκριμένα
συμπεράσματα ή να εντοπιστούν τυχόν ανωμαλίες στο σύστημα.

image::../../assets/locust.png[]


== Αρχείο μέτρησης

Στην παρούσα έκθεση παρατίθεται ένα αρχείο Excel που περιέχει λεπτομερείς μετρήσεις φορτίου που πραγματοποιήθηκαν κατά τη διάρκεια των δοκιμών μας.
Αυτές οι μετρήσεις περιλαμβάνουν αναφορές χρόνου απόκρισης, αριθμού αιτημάτων που πραγματοποιήθηκαν και ποσοστά σφαλμάτων για τις υπηρεσίες
μας υπό διάφορες συνθήκες φόρτωσης. Με αυτές τις μετρήσεις, έχουμε τη δυνατότητα να αναλύσουμε την απόκριση της εφαρμογής μας και να αξιολογήσουμε
την απόδοσή της σε πραγματικούς σενάριους χρήσης. Αυτή η ανάλυση μπορεί να μας παράσχει ενδείξεις για τυχόν προβλήματα απόδοσης, σημεία βελτίωσης και την
ικανότητα του συστήματός μας να ανταποκρίνεται στην αυξημένη φόρτιση. Ας εξετάσουμε λεπτομερώς τα παρουσιαζόμενα δεδομένα για να αποκτήσουμε μια σαφή
εικόνα για την απόδοση και την αξιοπιστία των υπηρεσιών μας.

image::../../assets/graph.png[]
